//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Test.hh"
#include "CTest.hh"

#include <iostream>

Test::Test(SmartACE::SmartComponent *comp) 
:	TestCore(comp)
{
	std::cout << "constructor Test\n";
	n_times = 0;

	Smart::StatusCode status = COMP->objectRecognitionQueryServiceReq->connect("ObjectDetection", "ObjectRecognitionQueryServiceAnsw");
//	Smart::StatusCode status2 = COMP->objectRecognitionQueryServiceReq->connect("ColorSegmentation", "ColorQueryServiceAnsw");

	if(status != Smart::SMART_OK) {
		std::cerr << "objectRecognitionQueryServiceReq: " << Smart::StatusCodeConversion(status);
	}

}
Test::~Test() 
{
	std::cout << "destructor Test\n";
}



int Test::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int Test::on_execute()
{
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	if(n_times < 1){

		//Set parameters  ****TODO simplify
		CommObjectRecognitionObjects::CommObjectRecognitionInformation image_information;
		CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties object_information;
		CommObjectRecognitionObjects::ROI roi;
		CommObjectRecognitionObjects::CommPoint2d point;

		//Example point
		point.setX(270).setY(296);
		roi.setWidth(90).setHeight(220).setPoint(point);
		image_information.setRoi(roi);


		status = COMP->objectRecognitionQueryServiceReq->query(image_information, object_information);
		if(status != Smart::SMART_OK) {
			std::cerr << "objectRecognitionQueryServiceReq: " << Smart::StatusCodeConversion(status);
		}
		CommBasicObjects::CommPose3d  p_object = object_information.getPose();

		while (p_object.get_position().getX()< 0 && p_object.get_position().getY()<0 ){
			usleep(100);
			status = COMP->objectRecognitionQueryServiceReq->query(image_information, object_information);
			p_object = object_information.getPose();
		}
		std::cout<< "[CTest]Object detected, position  x:"<<p_object.get_position().getX()<<", y:"<<p_object.get_position().getY()<<", z:"<<p_object.get_position().getZ()<<std::endl;


	}

	n_times++;
	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int Test::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
