//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Spin.hh"
#include "ROSBridge.hh"

#include <iostream>

Spin::Spin(SmartACE::SmartComponent *comp) 
:	SpinCore(comp)
{

	Smart::StatusCode status = COMP->objectQueryServiceReq->connect("ObjectLocation", "ObjectQueryServiceAnsw");
//	Smart::StatusCode status2 = COMP->objectRecognitionQueryServiceReq->connect("ColorSegmentation", "ColorQueryServiceAnsw");

	if(status != Smart::SMART_OK)
		std::cerr << "objectRecognitionQueryServiceReq: " << Smart::StatusCodeConversion(status);

	ros::NodeHandle priv("~");

	//chatter_pub = n.advertise<std_msgs::String>("chatter", 1);
	 object_server  = priv.advertiseService("active", &Spin::object_detection, this);
}
Spin::~Spin() 
{
	std::cout << "destructor Spin\n";
}


int Spin::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int Spin::on_execute()
{

	Smart::StatusCode status;

    if(ros::ok())
        ros::spinOnce();

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int Spin::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}


bool Spin::object_detection(robmosys_srvs::objectinformation::Request  &req, robmosys_srvs::objectinformation::Response &res)
{
	CommPerception::CommInfDetection image_information;
	CommPerception::CommObjectProperties object_information;

	Smart::StatusCode status = COMP->objectQueryServiceReq->query(image_information, object_information);
	if(status != Smart::SMART_OK) {
		std::cerr << "objectQueryServiceReq: " << Smart::StatusCodeConversion(status);
	}

	std::vector<geometry_msgs::PoseStamped> objs_list;

	for(size_t i = 0; i<object_information.getObjectsSize();i++){
		CommPerception::ObjectCore objects = object_information.getObjectsElemAtPos(i);
		CommBasicObjects::CommPose3d  p_object = objects.getPose();
		objs_list.push_back(commpose3d_to_posestamped(p_object));
	}

	res.pose = objs_list;

	return true;
}

geometry_msgs::PoseStamped Spin::commpose3d_to_posestamped(CommBasicObjects::CommPose3d smart_pose){

	geometry_msgs::PoseStamped ros_poses;

	ros_poses.header.frame_id = "/camera_depth_optical_frame";

	ros_poses.pose.position.x = smart_pose.getPosition().getX();
	ros_poses.pose.position.y = smart_pose.getPosition().getY();
	ros_poses.pose.position.z = smart_pose.getPosition().getZ();

	ros_poses.pose.orientation.w = 1;

	return ros_poses;
}
